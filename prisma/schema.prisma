generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  email          String       @unique
  supabase_id    String       @unique
  phone          String
  matricule      String?
  post           String?
  name           String?   
  userSignatureUrl String?
  isSignateurDossierAgricole Boolean @default(false)
  signaturePosition Int?
  role           Role
  signatures     Signatures[] @relation("signatures")
  signateursRole     Signateurs[] @relation("signateurs")
  // departementChef Departement[]  @relation("departementChefRelation")
  departement Departement?     @relation("departements", fields: [departementId], references: [id])
  departementId     String?    @db.ObjectId
  rejected Folders[]  @relation("rejet")
  folders Folders[]
  documents Documents[]
  isPasswordInit Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Documents {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  title      String
  createdBy        Users     @relation(fields: [createdById], references: [id])
  createdById     String    @db.ObjectId
  isPrincipal Boolean @default(false)
  folder       Folders     @relation( fields: [folderId], references: [id])
  folderId     String    @db.ObjectId
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Departement {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  // chefDepartement       Users     @relation("departementChefRelation", fields: [chefDepartementId], references: [id])
  // chefDepartementId     String    @db.ObjectId
  users Users[]  @relation("departements")
  isCreditAgricole Boolean @default(false)
  isServiceReseau Boolean @default(false)
  folders Folders[]
  isDefault Boolean @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Folders {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  description       String
  nom       String?
  adress       String?
  telephone       String?
  email       String?
  isDefault Boolean @default(false)
  isRejected Boolean @default(false)
  rejected        Users?     @relation("rejet", fields: [rejectedId], references: [id])
  rejectedId     String?    @db.ObjectId
  isValidateBeforeSignature Boolean @default(false)
  createdBy        Users     @relation(fields: [createdById], references: [id])
  createdById     String    @db.ObjectId
  signateurs Signateurs[] @relation("documentssignateurs")
  signatures Signatures[] @relation("signer")
  documents Documents[]
  departement       Departement     @relation( fields: [departementId], references: [id])
  departementId     String    @db.ObjectId
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

//Definis les signateurs pour un dossier
model Signateurs {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       Users     @relation("signateurs", fields: [userId], references: [id])
  userId     String    @db.ObjectId
  folder   Folders @relation("documentssignateurs", fields: [folderId], references: [id])
  folderId String    @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Signatures {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       Users     @relation("signatures", fields: [userId], references: [id])
  userId     String    @db.ObjectId
  folder   Folders @relation("signer", fields: [folderId], references: [id])
  folderId String    @db.ObjectId
  description String
  signedAt   DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum Role {
  ADMIN //DSI
  MEMBER //Signateur
  ADMIN_MEMBER //Chef de departement
  SUDO //DÃ©veloppeur
}
