generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id                         String           @id @default(auto()) @map("_id") @db.ObjectId
  email                      String           @unique
  password                   String           @default("")
  refresh_token              String?
  // supabase_id    String       @unique
  phone                      String
  matricule                  String?
  position                   String?
  name                       String?
  userSignatureUrl           String?
  isSignateurDossierAgricole Boolean          @default(false)
  role                       Role
  signatures                 Signatures[]     @relation("signatures")
  signateursRole             Signateurs[]     @relation("signateurs")
  // departementChef Departement[]  @relation("departementChefRelation")
  departement                Departement?     @relation("departements", fields: [departementId], references: [id])
  departementId              String?          @db.ObjectId
  folders                    Folders[]
  documents                  Documents[]
  isPasswordInit             Boolean          @default(false)
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
  isPasswordForgotten        Boolean          @default(false)
  location                   String?
  folderViewers              FolderViewer[]   @relation("UserFolderViewers")
}

model Documents {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  url              String
  title            String
  createdBy        Users           @relation(fields: [createdById], references: [id])
  createdById      String          @db.ObjectId
  folder           Folders         @relation(fields: [folderId], references: [id])
  folderId         String          @db.ObjectId
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}


model Departement {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  users            Users[]   @relation("departements")
  isCreditAgricole Boolean   @default(false)
  isServiceReseau  Boolean   @default(false)
  isAccountant     Boolean   @default(false)
  isFromNiamey     Boolean   @default(false)
  folders          Folders[]
  isDefault        Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Folders {
  id                    String       @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  description           String
  nom                   String?
  adress                String?
  telephone             String?
  email                 String?
  createdBy             Users        @relation(fields: [createdById], references: [id])
  createdById           String       @db.ObjectId
  signateurs            Signateurs[] @relation("documentssignateurs")
  signatures            Signatures[] @relation("signer")
  documents             Documents[]
  departement           Departement  @relation(fields: [departementId], references: [id])
  departementId         String       @db.ObjectId
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  signaturePosition     Int          @default(0)
  isSigningEnded        Boolean      @default(false)
  isVisibleByAccountant Boolean      @default(false)
  number                Int?
}

//Definis les signateurs pour un dossier
model Signateurs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Users    @relation("signateurs", fields: [userId], references: [id])
  userId    String   @db.ObjectId
  folder    Folders  @relation("documentssignateurs", fields: [folderId], references: [id])
  folderId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hasSigned Boolean  @default(false)
}

model Signatures {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        Users    @relation("signatures", fields: [userId], references: [id])
  userId      String   @db.ObjectId
  folder      Folders  @relation("signer", fields: [folderId], references: [id])
  folderId    String   @db.ObjectId
  description String
  signedAt    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ClientUser {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  email               String           @unique
  password            String           @default("")
  refresh_token       String?
  phone               String
  name                String?
  role                Role
  clientsFolders             ClientsFolders[]
  documents           ClientsDocuments[]
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  isPasswordForgotten Boolean          @default(false)
  location                   String?
}

model ClientsFolders {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  createdByClient    ClientUser       @relation(fields: [createdByClientId], references: [id])
  createdByClientId  String      @db.ObjectId
  documents    ClientsDocuments[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  viewers      FolderViewer[]
}

model ClientsDocuments {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  url              String
  title            String
  createdByClient        ClientUser           @relation(fields: [createdByClientId], references: [id])
  createdByClientId      String          @db.ObjectId
  clientsFolders           ClientsFolders         @relation(fields: [folderId], references: [id])
  folderId         String          @db.ObjectId
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model FolderViewer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  folder      ClientsFolders @relation(fields: [folderId], references: [id])
  folderId    String   @db.ObjectId
   user        Users    @relation("UserFolderViewers", fields: [userId], references: [id])
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN //DSI
  MEMBER //Signateur
  ADMIN_MEMBER //Chef de departement
  SUDO //DÃ©veloppeur
  CLIENT //Le client
}
